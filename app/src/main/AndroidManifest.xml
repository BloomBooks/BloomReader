<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="org.sil.bloom.reader"
    android:installLocation="auto">

    <!-- Normal Permissions - granted by being in Manifest -->
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <!-- So that just for the duration of WiFi transfer we can hold a lock. -->
    <uses-permission android:name="android.permission.WAKE_LOCK"/>
    <!-- Used at least for analytics, soon for Bloom Library download. Was present when I added
    analytics, so may be used for something else also. -->
    <uses-permission android:name="android.permission.INTERNET" />
    <!-- On later versions of Android this seems to be needed for receiving UDP broadcasts. -->
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <!-- On later versions of Android this seems to be needed for receiving UDP broadcasts. -->
    <uses-permission android:name="android.permission.CHANGE_WIFI_MULTICAST_STATE" />
    <!-- currently just because it's how we get the device name for WiFi, but eventually we will have
    other Bluetooth functions. -->
    <uses-permission android:name="android.permission.BLUETOOTH"/>

    <!-- Dangerous Permissions - must be requested at runtime -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>

    <application
        android:name=".BloomReaderApplication"
        android:requestLegacyExternalStorage="true"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <!-- Some activities which declare android:theme="@style/AppTheme.NoActionBar" actually
        do have action bars, but we're choosing to configure a toolbar as our action bar
        using setSupportActionBar() -->
        <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar"
            android:configChanges="keyboardHidden|orientation|screenSize|screenLayout">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

            <!--
                In reworking these filters for BL-6941, this answer seemed the clearest to follow:
                https://stackoverflow.com/questions/1733195/android-intent-filter-for-a-particular-file-extension?#answer-31028507
                We have three intent filters to detect when another app is trying to send us a bloom
                file. Principally this is aimed at being able to open Bloom files from File Manager
                apps. The parameters included in the intent depend on the File Manager sending it,
                so we need a variety of filters to support as many sending apps as possible.
                 - The first filter checks the file extension on intents where a MIME
                type is not set.
                 - The second filter checks the file extensions where a MIME type is
                set. Both are necessary because the sending app may or may not choose to
                include the MIME type. The MIME type is set to */* because the MIME
                type in the intent may be incorrect since our file type is a unique one.
                Since we're still filtering by file extension, this is ok.
                 - The third filter will catch an intent if the MIME type is correct
                but the file extension is not what we expected. This should be an unusual case.
                 - The fourth filter (currently commented out) catches all 'content' scheme intents with defined MIME-type and
                then the MainActivity code will check the original filename against the correct
                extensions. The original filename is not available to the intent on the surface and
                takes a bit of digging around to find.
            -->
            <!--
                Matches intents by file extension when no MIME type is set.
            -->
            <intent-filter
                android:icon="@drawable/ic_bloomicon"
                android:label="@string/app_name">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="file" />
                <data android:scheme="content" />
                <data android:host="*" />
                <!--
                    Work around Android's ugly primitive PatternMatcher implementation that can't
                    cope with matching the first character (period or 'b' or whatever!) early in
                    the path unless it's explicitly matched.
                    See https://stackoverflow.com/questions/3400072/pathpattern-to-match-file-extension-does-not-work-if-a-period-exists-elsewhere-i/8599921
                    Also work around a file transfer bug that appends ".enc" to the end of the filename.
                -->
                <data android:pathPattern=".*\\.bloomd" />
                <data android:pathPattern=".*\\.bloomd.enc" />
                <data android:pathPattern=".*\\.bloombundle" />
                <data android:pathPattern=".*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\..*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.bloombundle.enc" />
            </intent-filter>
            <!--
                Match intents by file extension when a MIME type is set.
            -->
            <intent-filter
                android:icon="@drawable/ic_bloomicon"
                android:label="@string/app_name">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="file" />
                <data android:scheme="content" />
                <data android:host="*" />

                <data android:mimeType="*/*" />
                <!--
                    Work around Android's ugly primitive PatternMatcher implementation that can't
                    cope with matching the first character (period or 'b' or whatever!) early in
                    the path unless it's explicitly matched.
                    See https://stackoverflow.com/questions/3400072/pathpattern-to-match-file-extension-does-not-work-if-a-period-exists-elsewhere-i/8599921
                    Also work around a file transfer bug that appends ".enc" to the end of the filename.
                -->
                <data android:pathPattern=".*\\.bloomd" />
                <data android:pathPattern=".*\\.bloomd.enc" />
                <data android:pathPattern=".*\\.bloombundle" />
                <data android:pathPattern=".*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\..*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.bloombundle.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.bloomd" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.bloomd.enc" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.bloombundle" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.bloombundle.enc" />
            </intent-filter>

            <!--
                Match intents by MIME type in case the file extension gets lost.
            -->
            <intent-filter
                android:icon="@drawable/ic_bloomicon"
                android:label="@string/app_name">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="file" />
                <data android:scheme="content" />
                <!-- Sometimes the MIME type we get is not exactly what we set - hence the variety of options -->
                <!-- As of May 2019, we don't actually know of any case where these 6 bloom-specific mime types get used,
                     but I'm too paranoid to remove them. Comments added with these originally referred to
                     their need in opening from email. -->
                <data android:mimeType="application/vnd.bloom" />
                <data android:mimeType="application/bloom" />
                <data android:mimeType="application/vnd.bloomd" />
                <data android:mimeType="application/bloomd" />
                <data android:mimeType="application/vnd.bloombundle" />
                <data android:mimeType="application/bloombundle" />

                <!-- This is unfortunate, but some apps (e.g. Gmail) just don't seem to include the file name in the path,
                     so pathPattern matching is completely useless. Adding this means Bloom Reader will offer to open
                     all files with application/octet-stream (which is what Gmail sends for our files as of May 2019),
                     but we decided that is better than not offering to open any. -->
                <data android:mimeType="application/octet-stream" />
                <!-- I'm also adding application/zip in the anticipation that it will help with WhatsApp.
                     (And it seems it may have... May 2019.) -->
                <data android:mimeType="application/zip" />
                <!-- This makes Drive able to open .bloomd files on my Android 6 phone... May 2019 -->
                <data android:mimeType="application/x-zip" />
            </intent-filter>
            <!--
                BR currently needs to match 'content' requests irrespective of file extension
                and then check the extension in the code [MainActivity.processIntentData()].
                Normally we would want to only match particular MIME-types that our code knows about,
                but then we don't catch the Samsung default file manager (My Files), which defines
                MIME-type as empty string, which is only matchable with the most generic filter! The
                other 3 filters all use both 'file' and 'content' scheme, but I don't want to put
                'file' in this filter to keep from catching more than we absolutely have to.

                The Samsung "My Files" app can establish a connection between .bloomd files and
                Bloom Reader if the .bloomd file is on the device before Bloom Reader is installed.
                Clicking on the file, then choosing "Search" from the popup warning dialog and
                installing Bloom Reader establishes the connection.  This connection appears to
                persist if Bloom Reader is then uninstalled and reinstalled.
                I don't know if it can establish a connection to both .bloomd and .bloombundle
                files, but possibly uninstalling it after getting the connection to one would allow
                the user to reinstall and get a connection to the other without losing the first.
            -->
            <!-- This filter opens up Bloom Reader to offering to handle all sorts of files!  This
                 is probably more confusing to more users than the workaround described above.
                 See https://issues.bloomlibrary.org/youtrack/issue/BL-7045.
            -->
            <!--intent-filter
                android:icon="@drawable/book"
                android:label="@string/app_name">
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="content" />
                <data android:host="*" />

                <data android:mimeType="*/*" />
            </intent-filter-->
        </activity>
        <activity
            android:name=".ReaderActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar"
            android:configChanges="keyboardHidden|orientation|screenSize|screenLayout" />

        <service
            android:name=".wifi.NewBookListenerService"
            android:enabled="true"
            android:exported="true" />
        <service
            android:name=".wifi.SyncService"
            android:enabled="true"
            android:exported="true" />

        <activity
            android:name=".wifi.GetFromWiFiActivity"
            android:label="@string/app_name"
            android:excludeFromRecents="true"
            android:theme="@style/WiFiDialogTheme" />
        <activity
            android:name=".ShelfActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar" />

        <receiver android:name="org.sil.bloom.reader.ConnectivityReceiver"
            android:enabled="true">
            <intent-filter>
                <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
            </intent-filter>
        </receiver>

        <provider
            android:authorities="${applicationId}.fileprovider"
            android:name="androidx.core.content.FileProvider"
            android:grantUriPermissions="true"
            android:exported="false">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/filepaths" />
        </provider>
    </application>

</manifest>
