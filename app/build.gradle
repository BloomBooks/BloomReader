plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '2.7.2'
}

// This is the master definition of what version of Bloom Reader we are building
def versionMajor = 2
def versionMinor = 1
def versionRelease = getVersionRelease()

int getVersionRelease() {
    def fullVersionNumberFromBuildSystem = project.ext.properties['build.number'] ?: "0" // default for non-tc
    List tokens = fullVersionNumberFromBuildSystem.tokenize('.')
    return Integer.parseInt(tokens.last())
}

// Load our credentials
def keystorePropertiesFileName = "${System.properties['user.home']}${File.separator}keystore${File.separator}keystore_bloom_reader.properties"
def keystoreProperties
def keystorePropertiesFile = rootProject.file(keystorePropertiesFileName)
if (keystorePropertiesFile.exists()) {
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdkVersion 28

    defaultConfig {
        applicationId "org.sil.bloom.reader"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode versionMajor * 100000 + versionMinor * 1000 + versionRelease.toInteger()
        versionName "${versionMajor}.${versionMinor}.${versionRelease}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary true
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
    }

    signingConfigs {
        release {
            if (keystoreProperties) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    flavorDimensions "default" // To satisfy stupid new requirement in AS3.0.1

    productFlavors {
        alpha {
            applicationIdSuffix ".alpha"
            versionNameSuffix "-alpha"
            signingConfig signingConfigs.release
            dimension 'default'
        }
        beta {
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta"
            signingConfig signingConfigs.release
            dimension 'default'
        }
        production {
            // no id or version name suffix; this is the main product.
            signingConfig signingConfigs.release
            dimension 'default'
        }
    }

    play {
        if (keystoreProperties) {
            serviceAccountCredentials = file(keystoreProperties['serviceAccountJsonFile'])
        } else {
            serviceAccountCredentials = file("dummy.json")
        }

        // We default to always uploading to internal initially. This makes the new apk
        // available much sooner for testing. Then we can promote it to whichever channel we
        // want either manually or using another task (like promoteAlphaReleaseArtifact... see below).
        track = "internal"

        // Used for the promote*Artifact tasks
        fromTrack = "internal"
        promoteTrack = "beta"
    }

    lintOptions {
        warning "MissingTranslation"
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

}

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation  'com.android.support:appcompat-v7:28.0.0'
    implementation  'com.android.support:support-v4:28.0.0'
    implementation  'com.android.support:recyclerview-v7:28.0.0'
    implementation  'com.android.support:design:28.0.0'
    // Supports the WiFi module's 'server' used to receive books from Bloom desktop
    implementation  'cz.msebera.android:httpclient:4.5.8'
    //noinspection GradleDynamicVersion
    implementation  'com.segment.analytics.android:analytics:4.+'
    implementation  'commons-io:commons-io:2.6'
    // Andrew tried this and had problems. I don't recall the details.
    //implementation  'commons-io:commons-compress:1.15'
    // Needed (at least) for making tar archives to send multiple books.
    implementation  'org.apache.commons:commons-compress:1.20'
    implementation  'com.android.support.constraint:constraint-layout:1.1.3'

    testImplementation  'junit:junit:4.13'
    testImplementation  'org.mockito:mockito-core:3.3.0'
    testImplementation  'org.json:json:20190722'  // make org.json classes available in unit tests

    androidTestImplementation 'com.android.support:design:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-web:3.0.2'
}

task copyBloomPlayerAssets(type: Copy, group: "Custom", description: "Copies bloom-player artifacts to required directory") {
    from "node_modules/bloom-player/dist"
    into "src/main/assets/bloom-player"
    exclude '*.map','bloomPlayer.js'
}

// To make the build completely automated, including fetching bloom-player from npm:
// Add these lines at the very start:
//plugins {
//    id "com.moowork.node" version "1.3.1"
//}
// Add this line after the other plugin calls:
// apply plugin: 'com.moowork.node'
// Insert the following lines here:
//project.afterEvaluate {
//    copyBloomPlayerAssets.dependsOn yarn
//    preBuild.dependsOn copyBloomPlayerAssets
//}
// But, if we do that, we can't overwrite the bloom-player assets temporarily for testing versions under development.
// Instead, TeamCity will need build steps to cd app, yarn, cd .., "gradle copyBloomPlayerAssets"