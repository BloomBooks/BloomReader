plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '2.8.0'
}

// This is the master definition of what version of Bloom Reader we are building
def versionMajor = 3
def versionMinor = 4
def versionRelease = getVersionRelease()

int getVersionRelease() {
    def fullVersionNumberFromBuildSystem = project.ext.properties['build.number'] ?: "0" // default for non-tc
    List tokens = fullVersionNumberFromBuildSystem.tokenize('.')
    return Integer.parseInt(tokens.last())
}

// Load our credentials
def keystorePropertiesFileName = "${System.properties['user.home']}${File.separator}keystore${File.separator}keystore_bloom_reader.properties"
def keystoreProperties
def keystorePropertiesFile = rootProject.file(keystorePropertiesFileName)
if (keystorePropertiesFile.exists()) {
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    /**
     * compileSdk specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdk 34

    defaultConfig {
        applicationId "org.sil.bloom.reader"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode versionMajor * 100000 + versionMinor * 1000 + versionRelease.toInteger()
        versionName "${versionMajor}.${versionMinor}.${versionRelease}"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary true
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            if (keystoreProperties) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    flavorDimensions = ["default"] // To satisfy stupid new requirement in AS3.0.1

    productFlavors {
        alpha {
            applicationIdSuffix ".alpha"
            versionNameSuffix "-alpha"
            signingConfig signingConfigs.release
            dimension 'default'
        }
        beta {
            applicationIdSuffix ".beta"
            versionNameSuffix "-beta"
            signingConfig signingConfigs.release
            dimension 'default'
        }
        production {
            // no id or version name suffix; this is the main product.
            signingConfig signingConfigs.release
            dimension 'default'
        }
    }

    play {
        if (keystoreProperties) {
            serviceAccountCredentials = file(keystoreProperties['serviceAccountJsonFile'])
        } else {
            serviceAccountCredentials = file("dummy.json")
        }

        // We default to always uploading to internal initially. This makes the new apk
        // available much sooner for testing. Then we can promote it to whichever channel we
        // want either manually or using another task (like promoteAlphaReleaseArtifact... see below).
        track = "internal"

        // Used for the promote*Artifact tasks
        fromTrack = "internal"
        promoteTrack = "beta"
    }

    testOptions {
        animationsDisabled = true
    }
    lint {
        warning 'MissingTranslation', 'ExtraTranslation'
    }
    namespace 'org.sil.bloom.reader'
    buildFeatures {
        buildConfig true
    }
}

repositories {
    mavenCentral()
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'com.google.android.material:material:1.12.0'
    // Supports the WiFi module's 'server' used to receive books from Bloom desktop
    implementation  'cz.msebera.android:httpclient:4.5.8'

    implementation 'com.segment.analytics.android:analytics:4.10.4'

    implementation  'commons-io:commons-io:2.13.0'

    // Needed (at least) for making tar archives to send multiple books.
    // We tried commons-io:commons-compress but it didn't work for unknown/forgotten reasons
    implementation  'org.apache.commons:commons-compress:1.21'

    testImplementation  'junit:junit:4.13.2'
    testImplementation  'org.mockito:mockito-core:3.4.6'
    testImplementation  'org.json:json:20200518'  // make org.json classes available in unit tests

    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.6.1'
}

tasks.register('copyBloomPlayerAssets', Copy) {
    from "node_modules/bloom-player/dist"
    into "src/main/assets/bloom-player"
    exclude '*.map', 'bloomPlayer.js'
}

tasks.register('copyBloomVersionInfo', Copy){
    from "node_modules/bloom-player/package.json"
    into "src/main/assets/bloom-player"
}

// I'm chalking this up to one of those magical Android incantations you never
// really understand. Essentially, upgrading to the 34 sdk (or the latest gradle
// or something else which I upgraded at the same time) started forcing me to
// say that my custom task needed to be run before all these others.
// I applied no logic to creating the list. I just added them until the errors stopped.
// The .*?s cover all the alpha/beta/production and debug/release combos
// as well as lint/lintVital.
project.afterEvaluate {
    tasks.configureEach { task ->
        if (
                task.name.matches('^merge.*?Assets$') ||
                task.name.matches('^generate.*?Lint.*?ReportModel$') ||
                task.name.matches('^lint.*?Analyze.*?')
        ) {
            task.dependsOn copyBloomPlayerAssets
        }
    }
}

// To make the build completely automated, including fetching bloom-player from npm:
// Add these lines at the very start:
//plugins {
//    id "com.moowork.node" version "1.3.1"
//}
// Add this line after the other plugin calls:
// apply plugin: 'com.moowork.node'
// Insert the following lines here:
//project.afterEvaluate {
//    copyBloomPlayerAssets.dependsOn yarn
//    preBuild.dependsOn copyBloomPlayerAssets
//}
// But, if we do that, we can't overwrite the bloom-player assets temporarily for testing versions under development.
// Instead, TeamCity will need build steps to cd app, yarn, cd .., "gradle copyBloomPlayerAssets"